{"ast":null,"code":"var _jsxFileName = \"/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/Components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { GoogleMap, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  onLocationSelect,\n  allowMarkerChange,\n  initialLocation\n}) => {\n  _s();\n  const mapRef = useRef(null);\n\n  // State to hold the marker's position\n  const [markerPosition, setMarkerPosition] = useState(initialLocation ? {\n    lat: initialLocation.lat,\n    lng: initialLocation.lng\n  } : null);\n\n  // Set the initial center of the map\n  const initialCenter = markerPosition || {\n    lat: 30.745,\n    lng: 30.523\n  }; // Fallback center if no initialLocation provided\n\n  // Handle the click event on the map to get the selected location\n  const handleMapClick = event => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n\n    // Update the marker position only if marker change is allowed\n    if (allowMarkerChange) {\n      setMarkerPosition({\n        lat,\n        lng\n      });\n    }\n\n    // Always call the function with selected coordinates\n    onLocationSelect({\n      lat,\n      lng\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    id: \"map\",\n    mapContainerStyle: {\n      height: '400px',\n      width: '800px'\n    },\n    center: initialCenter // Center on markerPosition or initialCenter\n    ,\n    zoom: 10 // Adjust zoom level as needed\n    ,\n    onClick: handleMapClick // Set up the click event handler\n    ,\n    onLoad: map => mapRef.current = map // Store the map instance if needed\n    ,\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      position: markerPosition,\n      icon: initialLocation && initialLocation.icon // Use custom icon if provided\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"TU13KbZOucHkKurr62wh+BuCtFE=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useRef","useState","GoogleMap","Marker","jsxDEV","_jsxDEV","MapComponent","onLocationSelect","allowMarkerChange","initialLocation","_s","mapRef","markerPosition","setMarkerPosition","lat","lng","initialCenter","handleMapClick","event","latLng","id","mapContainerStyle","height","width","center","zoom","onClick","onLoad","map","current","children","position","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/Components/MapComponent.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { GoogleMap, Marker } from '@react-google-maps/api';\n\nconst MapComponent = ({ onLocationSelect, allowMarkerChange, initialLocation }) => {\n    const mapRef = useRef(null);\n\n    // State to hold the marker's position\n    const [markerPosition, setMarkerPosition] = useState(initialLocation ? { lat: initialLocation.lat, lng: initialLocation.lng } : null);\n\n    // Set the initial center of the map\n    const initialCenter = markerPosition || { lat: 30.745, lng: 30.523 }; // Fallback center if no initialLocation provided\n\n    // Handle the click event on the map to get the selected location\n    const handleMapClick = (event) => {\n        const lat = event.latLng.lat();\n        const lng = event.latLng.lng();\n\n        // Update the marker position only if marker change is allowed\n        if (allowMarkerChange) {\n            setMarkerPosition({ lat, lng });\n        }\n\n        // Always call the function with selected coordinates\n        onLocationSelect({ lat, lng });\n    };\n\n    return (\n        <GoogleMap\n            id=\"map\"\n            mapContainerStyle={{ height: '400px', width: '800px' }}\n            center={initialCenter} // Center on markerPosition or initialCenter\n            zoom={10} // Adjust zoom level as needed\n            onClick={handleMapClick} // Set up the click event handler\n            onLoad={map => (mapRef.current = map)} // Store the map instance if needed\n        >\n            {/* Render the marker if markerPosition is set */}\n            \n                <Marker \n                    position={markerPosition} \n                    icon={initialLocation && initialLocation.icon} // Use custom icon if provided\n                />\n            \n        </GoogleMap>\n    );\n};\n\nexport default MapComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,SAAS,EAAEC,MAAM,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,YAAY,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC,iBAAiB;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAMC,MAAM,GAAGX,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAACQ,eAAe,GAAG;IAAEK,GAAG,EAAEL,eAAe,CAACK,GAAG;IAAEC,GAAG,EAAEN,eAAe,CAACM;EAAI,CAAC,GAAG,IAAI,CAAC;;EAErI;EACA,MAAMC,aAAa,GAAGJ,cAAc,IAAI;IAAEE,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAO,CAAC,CAAC,CAAC;;EAEtE;EACA,MAAME,cAAc,GAAIC,KAAK,IAAK;IAC9B,MAAMJ,GAAG,GAAGI,KAAK,CAACC,MAAM,CAACL,GAAG,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGG,KAAK,CAACC,MAAM,CAACJ,GAAG,CAAC,CAAC;;IAE9B;IACA,IAAIP,iBAAiB,EAAE;MACnBK,iBAAiB,CAAC;QAAEC,GAAG;QAAEC;MAAI,CAAC,CAAC;IACnC;;IAEA;IACAR,gBAAgB,CAAC;MAAEO,GAAG;MAAEC;IAAI,CAAC,CAAC;EAClC,CAAC;EAED,oBACIV,OAAA,CAACH,SAAS;IACNkB,EAAE,EAAC,KAAK;IACRC,iBAAiB,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAE;IACvDC,MAAM,EAAER,aAAc,CAAC;IAAA;IACvBS,IAAI,EAAE,EAAG,CAAC;IAAA;IACVC,OAAO,EAAET,cAAe,CAAC;IAAA;IACzBU,MAAM,EAAEC,GAAG,IAAKjB,MAAM,CAACkB,OAAO,GAAGD,GAAK,CAAC;IAAA;IAAAE,QAAA,eAInCzB,OAAA,CAACF,MAAM;MACH4B,QAAQ,EAAEnB,cAAe;MACzBoB,IAAI,EAAEvB,eAAe,IAAIA,eAAe,CAACuB,IAAK,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEpB,CAAC;AAAC1B,EAAA,CAzCIJ,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}