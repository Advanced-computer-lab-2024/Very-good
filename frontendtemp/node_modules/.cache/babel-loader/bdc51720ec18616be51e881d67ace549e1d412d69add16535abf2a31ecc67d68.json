{"ast":null,"code":"var _jsxFileName = \"/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/Pages/AdminCategory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ProductSort from '../Components/SortProductRate.js';\nimport { createProduct, updateProduct, fetchProductsNoID } from '../Services/productServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminCategory(sellerId) {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [formData, setFormData] = useState({\n    name: ''\n  });\n  const [selectedOperation, setSelectedOperation] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null); // Track the category being edited\n  const [editMode, setEditMode] = useState(false); // Whether we're editing or creating\n  const [currentProductId, setCurrentProductId] = useState(null);\n  const [currentSellerId, setSellerProductId] = useState(null); // Product being edited\n  const [products, setProducts] = useState([]); // List of products for the seller\n  const [loading, setLoading2] = useState(true); // Loading state\n  const [error2, setError2] = useState(null); // Error state\n  const [formData2, setFormData2] = useState({\n    name: '',\n    sellerId: sellerId || '',\n    // Ensure sellerId is initialized correctly\n    price: '',\n    description: '',\n    stock: '',\n    rating: ''\n  });\n\n  // Fetch categories on page load\n  useEffect(() => {\n    fetchCategories();\n    getAdminProducts();\n  }, []);\n\n  // Fetch all categories\n  const fetchCategories = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/api/categories');\n      setCategories(response.data.data || []); // Ensure it's set correctly\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n    }\n  };\n  const getAdminProducts = async () => {\n    try {\n      const productsData = await fetchProductsNoID(); // Fetch products based on sellerId\n      console.log('productsData', productsData);\n      setProducts(productsData.data); // Set products fetched\n    } catch (err) {\n      setError2('Failed to fetch products.');\n      console.error(err);\n    } finally {\n      setLoading2(false); // Stop loading\n    }\n  };\n\n  // Handle form input change for categories\n  const handleInputChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Create a new category\n  const handleCreate = async () => {\n    console.log('Creating category with data:', formData); // Log the form data\n    try {\n      const response = await axios.post('http://localhost:4000/api/categories', formData);\n      console.log('Category created:', response.data); // Log the response data\n      setCategories([...categories, response.data.category]); // Update state with the new category\n      setFormData({\n        name: ''\n      }); // Reset form\n      setSelectedOperation(null); // Return to main menu\n    } catch (error) {\n      console.error('Error creating category:', error);\n    }\n  };\n\n  // Update a category\n  const handleUpdate = async () => {\n    if (!selectedCategory) {\n      console.error('No category selected for update');\n      return;\n    }\n    console.log('Updating category:', selectedCategory, 'with data:', formData);\n    try {\n      const response = await axios.patch(`http://localhost:4000/api/categories/${selectedCategory}`, formData);\n      console.log('Category updated:', response.data);\n\n      // Optionally, you can refetch categories to update the state\n      fetchCategories();\n      setFormData({\n        name: ''\n      }); // Reset form after update\n      setSelectedCategory(null); // Clear the selected category\n    } catch (error) {\n      console.error('Error updating category:', error);\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n      }\n    }\n  };\n\n  // Delete a category\n  const handleDelete = async categoryId => {\n    console.log('Deleting category with ID:', categoryId); // Log the category ID\n    try {\n      const response = await axios.delete(`http://localhost:4000/api/categories/${categoryId}`); // Use ID in the URL\n      console.log('Delete response:', response.data); // Log the response data\n      // Update state to remove the deleted category\n      setCategories(categories.filter(cat => cat._id !== categoryId));\n    } catch (error) {\n      console.error('Error deleting category:', error);\n    }\n  };\n\n  // Handle form input change for products\n  const handleInputChangeP = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData2(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n\n  // Handle form submission to create or update a product\n  // Product Form Submission Handler\n  const resetForm2 = () => {\n    setFormData2({\n      name: '',\n      sellerId: sellerId || '',\n      // Reset to the correct sellerId\n      price: '',\n      description: '',\n      stock: '',\n      rating: ''\n    });\n    setEditMode(false);\n    setCurrentProductId(null);\n    setSellerProductId(null); // Reset seller product ID\n  };\n\n  // Use resetForm2 in your submit handler\n  const handleSubmitP = async e => {\n    e.preventDefault();\n\n    // Validate required fields\n    if (!formData2.name || !formData2.price || !formData2.stock || !formData2.sellerId) {\n      setError2('All fields are required.');\n      return;\n    }\n\n    // Ensure price and stock are valid numbers\n    if (isNaN(formData2.price) || isNaN(formData2.stock)) {\n      setError2('Price and stock must be valid numbers.');\n      return;\n    }\n    try {\n      if (editMode && currentProductId) {\n        console.log('Current Product ID:', currentProductId); // Log current product ID\n        await updateProduct(formData2.sellerId, currentProductId, {\n          ...formData2\n        });\n        setProducts(prevProducts => prevProducts.map(prod => prod._id === currentProductId ? {\n          ...prod,\n          ...formData2\n        } : prod));\n      } else {\n        const newProduct = await createProduct(formData2);\n        setProducts(prevProducts => {\n          if (!Array.isArray(prevProducts)) {\n            return [newProduct];\n          }\n          return [...prevProducts, newProduct];\n        });\n      }\n      resetForm2();\n    } catch (err) {\n      console.error('Error updating product:', err.response ? err.response.data : err.message);\n      setError2('Failed to save product. Please check your input.');\n    }\n  };\n\n  // Edit product function\n  const handleEditP = product => {\n    setFormData2({\n      name: product.name,\n      sellerId: product.sellerId || sellerId,\n      // Ensure the sellerId is included\n      price: product.price,\n      description: product.description,\n      stock: product.stock,\n      rating: product.rating\n    });\n    setEditMode(true);\n    setCurrentProductId(product._id); // Set the current product ID\n    setSellerProductId(formData2.sellerId); // Store the seller ID for reference\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin - Manage Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), !selectedOperation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation('create'),\n        children: \"Create Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation('read'),\n        children: \"View Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation('delete'),\n        children: \"Delete Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation('update'),\n        children: \"Update Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), selectedOperation === 'create' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a New Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Category Name\",\n        value: formData.name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreate,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation(null),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), selectedOperation === 'update' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Update a Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => {\n          const categoryName = e.target.value;\n          setSelectedCategory(categoryName);\n          const category = categories.find(cat => cat.name === categoryName);\n          if (category) {\n            setFormData({\n              name: category.name\n            });\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category.name,\n          children: category.name\n        }, category._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), selectedCategory && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"New Category Name\",\n          value: formData.name,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdate,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation(null),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), selectedOperation === 'delete' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Delete a Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => {\n          const categoryId = e.target.value;\n          if (categoryId) handleDelete(categoryId); // Call delete function\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Category to Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category._id,\n          children: category.name\n        }, category._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation(null),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this), selectedOperation === 'read' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Categories List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), categories.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: category.name\n        }, category._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No categories available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedOperation(null),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin - Manage Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: editMode ? 'Edit Product' : 'Create New Product'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"opening-hours\",\n      onSubmit: handleSubmitP,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: formData2.name,\n        onChange: handleInputChangeP,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Seller ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"sellerId\",\n        value: formData2.sellerId,\n        onChange: handleInputChangeP,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"price\",\n        value: formData2.price,\n        onChange: handleInputChangeP,\n        required: true,\n        min: \"0\" // Validation for positive numbers\n        ,\n        step: \"0.01\" // Allows decimal values (e.g., 0.00, 0.01, etc.)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        value: formData2.description,\n        onChange: handleInputChangeP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Stock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"stock\",\n        value: formData2.stock,\n        onChange: handleInputChangeP,\n        required: true,\n        min: \"0\" // Validation for positive numbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Rating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"rating\",\n        value: formData2.rating,\n        onChange: handleInputChangeP,\n        min: \"0\",\n        max: \"5\",\n        step: \"0.1\" // Allows decimal values (e.g., 0.0, 1.5, etc.)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: editMode ? 'Update Product' : 'Create Product'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 5\n      }, this), editMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: resetForm2,\n        children: \"Cancel Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProductSort, {\n        products: products,\n        setProducts: setProducts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading products...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 17\n    }, this) : error2 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Products List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }, this), products.length > 0 ? products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itinerary-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: \", product.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description: \", product.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Stock: \", product.stock]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rating: \", product.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditP(product),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 33\n        }, this)]\n      }, product._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No products available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminCategory, \"NZhx1FUmB2QQRFWC/Zin8Ovceqo=\");\n_c = AdminCategory;\nexport default AdminCategory;\nvar _c;\n$RefreshReg$(_c, \"AdminCategory\");","map":{"version":3,"names":["React","useState","useEffect","axios","ProductSort","createProduct","updateProduct","fetchProductsNoID","jsxDEV","_jsxDEV","AdminCategory","sellerId","_s","categories","setCategories","formData","setFormData","name","selectedOperation","setSelectedOperation","selectedCategory","setSelectedCategory","editMode","setEditMode","currentProductId","setCurrentProductId","currentSellerId","setSellerProductId","products","setProducts","loading","setLoading2","error2","setError2","formData2","setFormData2","price","description","stock","rating","fetchCategories","getAdminProducts","response","get","data","error","console","productsData","log","err","handleInputChange","e","target","value","handleCreate","post","category","handleUpdate","patch","handleDelete","categoryId","delete","filter","cat","_id","handleInputChangeP","prevData","resetForm2","handleSubmitP","preventDefault","isNaN","prevProducts","map","prod","newProduct","Array","isArray","message","handleEditP","product","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","categoryName","find","length","className","onSubmit","required","min","step","max","_c","$RefreshReg$"],"sources":["/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/Pages/AdminCategory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ProductSort from '../Components/SortProductRate.js';\nimport { createProduct, updateProduct, fetchProductsNoID } from '../Services/productServices';\n\nfunction AdminCategory(sellerId) {\n  const [categories, setCategories] = useState([]);\n  const [formData, setFormData] = useState({ name: '' });\n  const [selectedOperation, setSelectedOperation] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null); // Track the category being edited\n  const [editMode, setEditMode] = useState(false); // Whether we're editing or creating\n  const [currentProductId, setCurrentProductId] = useState(null);\n  const [currentSellerId, setSellerProductId] = useState(null); // Product being edited\n  const [products, setProducts] = useState([]); // List of products for the seller\n  const [loading, setLoading2] = useState(true); // Loading state\n  const [error2, setError2] = useState(null); // Error state\n  const [formData2, setFormData2] = useState({\n    name: '',\n    sellerId: sellerId || '', // Ensure sellerId is initialized correctly\n    price: '',\n    description: '',\n    stock: '',\n    rating: '',\n  });\n\n  // Fetch categories on page load\n  useEffect(() => {\n    fetchCategories();\n    getAdminProducts();\n  }, []);\n\n  // Fetch all categories\n  const fetchCategories = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/api/categories');\n      setCategories(response.data.data || []); // Ensure it's set correctly\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n    }\n  };\n\n  const getAdminProducts = async () => {\n    try {\n      const productsData = await fetchProductsNoID(); // Fetch products based on sellerId\n      console.log('productsData', productsData);\n      setProducts(productsData.data); // Set products fetched\n    } catch (err) {\n      setError2('Failed to fetch products.');\n      console.error(err);\n    } finally {\n      setLoading2(false); // Stop loading\n    }\n  };\n\n  // Handle form input change for categories\n  const handleInputChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  // Create a new category\n  const handleCreate = async () => {\n    console.log('Creating category with data:', formData); // Log the form data\n    try {\n      const response = await axios.post('http://localhost:4000/api/categories', formData);\n      console.log('Category created:', response.data); // Log the response data\n      setCategories([...categories, response.data.category]); // Update state with the new category\n      setFormData({ name: '' }); // Reset form\n      setSelectedOperation(null); // Return to main menu\n    } catch (error) {\n      console.error('Error creating category:', error);\n    }\n  };\n\n  // Update a category\n  const handleUpdate = async () => {\n    if (!selectedCategory) {\n      console.error('No category selected for update');\n      return;\n    }\n\n    console.log('Updating category:', selectedCategory, 'with data:', formData);\n    try {\n      const response = await axios.patch(`http://localhost:4000/api/categories/${selectedCategory}`, formData);\n      console.log('Category updated:', response.data);\n\n      // Optionally, you can refetch categories to update the state\n      fetchCategories();\n      setFormData({ name: '' }); // Reset form after update\n      setSelectedCategory(null); // Clear the selected category\n    } catch (error) {\n      console.error('Error updating category:', error);\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n      }\n    }\n  };\n\n  // Delete a category\n  const handleDelete = async (categoryId) => {\n    console.log('Deleting category with ID:', categoryId); // Log the category ID\n    try {\n      const response = await axios.delete(`http://localhost:4000/api/categories/${categoryId}`); // Use ID in the URL\n      console.log('Delete response:', response.data); // Log the response data\n      // Update state to remove the deleted category\n      setCategories(categories.filter((cat) => cat._id !== categoryId));\n    } catch (error) {\n      console.error('Error deleting category:', error);\n    }\n  };\n\n  // Handle form input change for products\n  const handleInputChangeP = (e) => {\n    const { name, value } = e.target;\n    setFormData2((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  // Handle form submission to create or update a product\n// Product Form Submission Handler\nconst resetForm2 = () => {\n  setFormData2({\n      name: '',\n      sellerId: sellerId || '', // Reset to the correct sellerId\n      price: '',\n      description: '',\n      stock: '',\n      rating: '',\n  });\n  setEditMode(false);\n  setCurrentProductId(null);\n  setSellerProductId(null); // Reset seller product ID\n};\n\n// Use resetForm2 in your submit handler\nconst handleSubmitP = async (e) => {\n  e.preventDefault();\n\n  // Validate required fields\n  if (!formData2.name || !formData2.price || !formData2.stock || !formData2.sellerId) {\n      setError2('All fields are required.');\n      return;\n  }\n\n  // Ensure price and stock are valid numbers\n  if (isNaN(formData2.price) || isNaN(formData2.stock)) {\n      setError2('Price and stock must be valid numbers.');\n      return;\n  }\n\n  try {\n      if (editMode && currentProductId) {\n          console.log('Current Product ID:', currentProductId); // Log current product ID\n          await updateProduct(formData2.sellerId, currentProductId, { ...formData2 });\n          setProducts((prevProducts) =>\n              prevProducts.map((prod) =>\n                  prod._id === currentProductId ? { ...prod, ...formData2 } : prod\n              )\n          );\n      } else {\n          const newProduct = await createProduct(formData2);\n          setProducts((prevProducts) => {\n              if (!Array.isArray(prevProducts)) {\n                  return [newProduct];\n              }\n              return [...prevProducts, newProduct];\n          });\n      }\n      resetForm2();\n  } catch (err) {\n      console.error('Error updating product:', err.response ? err.response.data : err.message);\n      setError2('Failed to save product. Please check your input.');\n  }\n};\n\n\n\n// Edit product function\nconst handleEditP = (product) => {\n  setFormData2({\n      name: product.name,\n      sellerId: product.sellerId || sellerId, // Ensure the sellerId is included\n      price: product.price,\n      description: product.description,\n      stock: product.stock,\n      rating: product.rating,\n  });\n  setEditMode(true);\n  setCurrentProductId(product._id); // Set the current product ID\n  setSellerProductId(formData2.sellerId); // Store the seller ID for reference\n};\n\n\n  return (\n    <div>\n      <h1 >Admin - Manage Categories</h1>\n\n      {/* Operation Selection */}\n      {!selectedOperation && (\n        <div >\n          <button onClick={() => setSelectedOperation('create')}>Create Category</button>\n          <button onClick={() => setSelectedOperation('read')}>View Categories</button>\n          <button onClick={() => setSelectedOperation('delete')}>Delete Category</button>\n          <button onClick={() => setSelectedOperation('update')}>Update Category</button>\n        </div>\n      )}\n\n      {/* Create Category */}\n      {selectedOperation === 'create' && (\n        <div>\n          <h2>Create a New Category</h2>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Category Name\"\n            value={formData.name}\n            onChange={handleInputChange}\n          />\n          <button onClick={handleCreate}>Create</button>\n          <button onClick={() => setSelectedOperation(null)}>Back</button>\n        </div>\n      )}\n\n      {/* Update Category */}\n      {selectedOperation === 'update' && (\n        <div>\n          <h2>Update a Category</h2>\n          <select\n            onChange={(e) => {\n              const categoryName = e.target.value;\n              setSelectedCategory(categoryName);\n              const category = categories.find((cat) => cat.name === categoryName);\n              if (category) {\n                setFormData({ name: category.name });\n              }\n            }}\n          >\n            <option value=\"\">Select a Category</option>\n            {categories.map((category) => (\n              <option key={category._id} value={category.name}>\n                {category.name}\n              </option>\n            ))}\n          </select>\n          {selectedCategory && (\n            <div>\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"New Category Name\"\n                value={formData.name}\n                onChange={handleInputChange}\n              />\n              <button onClick={handleUpdate}>Update</button>\n            </div>\n          )}\n          <button onClick={() => setSelectedOperation(null)}>Back</button>\n        </div>\n      )}\n\n      {/* Delete Category */}\n      {selectedOperation === 'delete' && (\n        <div>\n          <h2>Delete a Category</h2>\n          <select\n            onChange={(e) => {\n              const categoryId = e.target.value;\n              if (categoryId) handleDelete(categoryId); // Call delete function\n            }}\n          >\n            <option value=\"\">Select a Category to Delete</option>\n            {categories.map((category) => (\n              <option key={category._id} value={category._id}>\n                {category.name}\n              </option>\n            ))}\n          </select>\n          <button onClick={() => setSelectedOperation(null)}>Back</button>\n        </div>\n      )}\n\n      {/* View Categories */}\n      {selectedOperation === 'read' && (\n        <div>\n          <h2>Categories List</h2>\n          {categories.length > 0 ? (\n            <ul>\n              {categories.map((category) => (\n                <li key={category._id}>{category.name}</li>\n              ))}\n            </ul>\n          ) : (\n            <p>No categories available.</p>\n          )}\n          <button onClick={() => setSelectedOperation(null)}>Back</button>\n        </div>\n      )}\n\n      {/* Render products component */}\n      {/* <div>\n      <h2>Update a ategory</h2>\n          <select\n            onChange={(e) => {\n              const categoryName = e.target.value;\n              setSelectedCategory(categoryName);\n              const category = categories.find(cat => cat.name === categoryName);\n              if (category) {\n                setFormData({ name: category.name });\n              }\n            }}\n            value={selectedCategory || ''}\n          >\n            <option value=\"\" disabled>Select a category to update</option>\n            {categories.map((category) => (\n              <option key={category._id} value={category.name}>{category.name}</option>\n            ))}\n          </select>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"New Category Name\"\n            value={formData.name}\n            onChange={handleInputChange}\n          />\n          <button onClick={handleUpdate}>Update</button>\n          <button onClick={() => setSelectedOperation(null)}>Back</button>\n        </div> */}\n      \n\n      {/* Read Categories */}\n      \n<h1>Admin - Manage Products</h1>\n            <h2>{editMode ? 'Edit Product' : 'Create New Product'}</h2>\n\n            {/* Product Form */}\n            \n\n{/* Product Form */}\n<form className='opening-hours'onSubmit={handleSubmitP}>\n    <label>Name</label>\n    <input\n        type=\"text\" \n        name=\"name\"\n        value={formData2.name} \n        onChange={handleInputChangeP}\n        required\n     />\n    <label>Seller ID</label>\n    <input\n        type=\"text\"\n        name=\"sellerId\"\n        value={formData2.sellerId}\n        onChange={handleInputChangeP}\n        required\n    />\n    <label>Price</label>\n    <input\n        type=\"number\"\n        name=\"price\"\n        value={formData2.price} \n        onChange={handleInputChangeP}\n        required\n        min=\"0\" // Validation for positive numbers\n        step=\"0.01\" // Allows decimal values (e.g., 0.00, 0.01, etc.)\n    />\n    <label>Description</label>\n    <input\n        type=\"text\"\n        name=\"description\"\n        value={formData2.description} \n        onChange={handleInputChangeP}\n    />\n    <label>Stock</label>\n    <input\n        type=\"number\"\n        name=\"stock\"\n        value={formData2.stock} \n        onChange={handleInputChangeP}\n        required\n        min=\"0\" // Validation for positive numbers\n    />\n    <label>Rating</label>\n    <input\n        type=\"number\"\n        name=\"rating\"\n        value={formData2.rating} \n        onChange={handleInputChangeP}\n        min=\"0\" \n        max=\"5\"\n        step=\"0.1\" // Allows decimal values (e.g., 0.0, 1.5, etc.)\n    />\n\n    <button type=\"submit\">{editMode ? 'Update Product' : 'Create Product'}</button>\n    {editMode && <button type=\"button\" onClick={resetForm2}>Cancel Edit</button>}\n</form>\n\n\n            <div>\n                <ProductSort products={products} setProducts={setProducts} /> {/* Pass products for sorting */}\n            </div>\n\n            {loading ? (\n                <p>Loading products...</p>\n            ) : error2 ? (\n                <p>{error2}</p>\n            ) : (\n                <div>\n                    <h2>Products List</h2>\n                    {products.length > 0 ? (\n                        products.map((product) => (\n                            <div key={product._id} className=\"itinerary-card\">\n                                <h3>{product.name}</h3>\n                                <p>Price: {product.price}</p>\n                                <p>Description: {product.description}</p>\n                                <p>Stock: {product.stock}</p>\n                                <p>Rating: {product.rating}</p>\n                                <button onClick={() => handleEditP(product)}>Edit</button>\n                            </div>\n                        ))\n                    ) : (\n                        <p>No products available.</p>\n                    )}\n                </div>\n            )}\n     \n    </div>\n  );\n}\n\nexport default AdminCategory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}