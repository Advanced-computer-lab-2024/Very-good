{"ast":null,"code":"// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\n// Function for the registration of a tourist\nconst registerTourist = async touristData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(touristData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tourist registered successfully:', data);\n      return data;\n    } else {\n      console.error('Error during registration:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    return null;\n  }\n};\n\n// Function to send a request to retrieve a certain tourist record by email\nconst fetchTouristByEmail = async emailObject => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(emailObject)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tourist data retrieved successfully:', data);\n      return data;\n    } else {\n      console.error('Error:', data.message);\n      return null;\n    }\n  } catch (error) {\n    console.error('Network error while fetching tourist:', error);\n    return null;\n  }\n};\n\n// Function to send a request for updating a tourist by email\nasync function updateTouristByEmail(email, updatedData) {\n  const url = 'http://localhost:4000/api/tourists/updateByEmail';\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        updatedData\n      })\n    });\n    if (!response.ok) {\n      const errorResponse = await response.json();\n      throw new Error(errorResponse.message || 'Error updating tourist');\n    }\n    const result = await response.json();\n    console.log('Tourist updated successfully:', result);\n    return result;\n  } catch (error) {\n    console.error('Error updating tourist:', error.message);\n    throw error;\n  }\n}\n\n// Tour guide request methods\n\n// Function for the registration of a tour guide\nconst createTourGuideRequest = async tourGuideData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tourGuideData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create tour guide: ' + response.statusText);\n    }\n    const data = await response.json();\n    console.log('registrationOK', data);\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // propagate the error to be handled where this function is called\n  }\n};\n\n//Admin regest\nconst registerAdmin = async adminData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/admins', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(adminData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Admin registered successfully:', data);\n      // Handle success here\n      return data; // You can return data for further processing if needed\n    } else {\n      console.error('Error during registration:', data);\n      // Handle error response here\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    // Handle network errors\n    return null; // Return null to signify an error occurred\n  }\n};\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async email => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error fetching Tour Guide');\n    }\n    const data = await response.json();\n    return data.tourGuide;\n  } catch (error) {\n    console.error('Error fetching tour guide:', error.message);\n    throw error;\n  }\n};\n\n// Function for the registration of a seller\nconst registerSeller = async sellerData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/sellers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sellerData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Seller registered successfully:', data);\n      return data;\n    } else {\n      console.error('Error during seller registration:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Network or server error during seller registration:', error);\n    return null;\n  }\n};\n\n// Export all the methods\nexport { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail, registerSeller, registerAdmin };","map":{"version":3,"names":["registerTourist","touristData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","log","error","fetchTouristByEmail","emailObject","message","updateTouristByEmail","email","updatedData","url","errorResponse","Error","result","createTourGuideRequest","tourGuideData","statusText","registerAdmin","adminData","fetchTourGuideByEmail","errorData","tourGuide","registerSeller","sellerData"],"sources":["/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/RequestSendingMethods.js"],"sourcesContent":["// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\n// Function for the registration of a tourist\nconst registerTourist = async (touristData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(touristData),\n      });\n  \n      const data = await response.json();\n      if (response.ok) {\n        console.log('Tourist registered successfully:', data);\n        return data;\n      } else {\n        console.error('Error during registration:', data);\n        return null;\n      }\n    } catch (error) {\n      console.error('Network or server error:', error);\n      return null;\n    }\n  };\n  \n  // Function to send a request to retrieve a certain tourist record by email\n  const fetchTouristByEmail = async (emailObject) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(emailObject),\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok) {\n        console.log('Tourist data retrieved successfully:', data);\n        return data;\n      } else {\n        console.error('Error:', data.message);\n        return null;\n      }\n    } catch (error) {\n      console.error('Network error while fetching tourist:', error);\n      return null;\n    }\n  };\n  \n  // Function to send a request for updating a tourist by email\n  async function updateTouristByEmail(email, updatedData) {\n    const url = 'http://localhost:4000/api/tourists/updateByEmail';\n  \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, updatedData }),\n      });\n  \n      if (!response.ok) {\n        const errorResponse = await response.json();\n        throw new Error(errorResponse.message || 'Error updating tourist');\n      }\n  \n      const result = await response.json();\n      console.log('Tourist updated successfully:', result);\n      return result;\n    } catch (error) {\n      console.error('Error updating tourist:', error.message);\n      throw error;\n    }\n  }\n  \n  // Tour guide request methods\n  \n  // Function for the registration of a tour guide\n  const createTourGuideRequest = async (tourGuideData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourGuides', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(tourGuideData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to create tour guide: ' + response.statusText);\n      }\n  \n      const data = await response.json();\n      console.log('registrationOK', data);\n      return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // propagate the error to be handled where this function is called\n    }\n};\n\n//Admin regest\nconst registerAdmin = async (adminData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/admins', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(adminData),\n        });\n  \n        const data = await response.json();\n        if (response.ok) {\n            console.log('Admin registered successfully:', data);\n            // Handle success here\n            return data; // You can return data for further processing if needed\n        } else {\n            console.error('Error during registration:', data);\n            // Handle error response here\n            return null; // Return null in case of error\n        }\n    } catch (error) {\n        console.error('Network or server error:', error);\n        // Handle network errors\n        return null; // Return null to signify an error occurred\n    }\n  };\n\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async (email) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error fetching Tour Guide');\n      }\n  \n      const data = await response.json();\n      return data.tourGuide;\n    } catch (error) {\n      console.error('Error fetching tour guide:', error.message);\n      throw error;\n    }\n  };\n  \n  // Function for the registration of a seller\n  const registerSeller = async (sellerData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/sellers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(sellerData),\n      });\n  \n      const data = await response.json();\n      if (response.ok) {\n        console.log('Seller registered successfully:', data);\n        return data;\n      } else {\n        console.error('Error during seller registration:', data);\n        return null;\n      }\n    } catch (error) {\n      console.error('Network or server error during seller registration:', error);\n      return null;\n    }\n  };\n  \n  // Export all the methods\n  export { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail, registerSeller,registerAdmin };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}