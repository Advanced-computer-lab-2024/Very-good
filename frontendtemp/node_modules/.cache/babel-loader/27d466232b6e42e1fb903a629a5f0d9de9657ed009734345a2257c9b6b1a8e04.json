{"ast":null,"code":"// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\n// Function for the registration of a tourist\nconst registerTourist = async touristData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(touristData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tourist registered successfully:', data);\n      // Handle success here\n      return data; // You can return data for further processing if needed\n    } else {\n      console.error('Error during registration:', data);\n      // Handle error response here\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    // Handle network errors\n    return null; // Return null to signify an error occurred\n  }\n};\n\n// Function to send a request to retrieve a certain tourist record by email\nconst fetchTouristByEmail = async emailObject => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(emailObject) // Send email object in request body\n    });\n    const data = await response.json();\n\n    // Handle the response\n    if (response.ok) {\n      console.log('Tourist data retrieved successfully:', data);\n      return data; // Return the retrieved data for further processing\n    } else {\n      console.error('Error:', data.message); // Log any error message returned from the server\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    console.error('Network error while fetching tourist:', error); // Handle network errors\n    return null; // Return null in case of a network error\n  }\n};\n// we want a function that sends a request for updating , we send the jason format with all the data and the email of the tourist \nasync function updateTouristByEmail(email, updatedData) {\n  const url = 'http://localhost:4000/api/tourists/updateByEmail'; // Backend endpoint\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      // Specify the request method\n      headers: {\n        'Content-Type': 'application/json' // Set content type to JSON\n      },\n      body: JSON.stringify({\n        email,\n        updatedData\n      }) // Convert email and updated data to JSON\n    });\n\n    // Check if the response is ok (status in the range 200-299)\n    if (!response.ok) {\n      const errorResponse = await response.json(); // Get error response\n      throw new Error(errorResponse.message || 'Error updating tourist');\n    }\n    const result = await response.json(); // Parse the JSON response\n    console.log('Tourist updated successfully:', result); // Log the result\n    return result; // Return the result to caller\n  } catch (error) {\n    console.error('Error updating tourist:', error.message); // Log any errors\n    throw error; // Rethrow the error for further handling\n  }\n}\n\n//------------------------------------\n// tour guide request methods \n// a method that handles the registration of the tour guide\nconst createTourGuideRequest = async tourGuideData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides', {\n      // Update the endpoint accordingly\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tourGuideData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create tour guide: ' + response.statusText);\n    }\n    const data = await response.json();\n    console.log('registrationOK', data);\n    return data; // return the response data (success message and tour guide info)\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // propagate the error to be handled where this function is called\n  }\n};\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async email => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      }) // Ensure you're sending the email correctly\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error fetching Tour Guide');\n    }\n    const data = await response.json();\n    return data.tourGuide; // Assuming your backend returns a tourGuide object\n  } catch (error) {\n    console.error('Error fetching tour guide:', error.message);\n    throw error; // Propagate error for further handling\n  }\n};\n\n// Export the new method along with others\nexport { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail };","map":{"version":3,"names":["registerTourist","touristData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","log","error","fetchTouristByEmail","emailObject","message","updateTouristByEmail","email","updatedData","url","errorResponse","Error","result","createTourGuideRequest","tourGuideData","statusText","fetchTourGuideByEmail","errorData","tourGuide"],"sources":["/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/RequestSendingMethods.js"],"sourcesContent":["// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\n// Function for the registration of a tourist\nconst registerTourist = async (touristData) => {\n  try {\n      const response = await fetch('http://localhost:4000/api/tourists', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(touristData),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n          console.log('Tourist registered successfully:', data);\n          // Handle success here\n          return data; // You can return data for further processing if needed\n      } else {\n          console.error('Error during registration:', data);\n          // Handle error response here\n          return null; // Return null in case of error\n      }\n  } catch (error) {\n      console.error('Network or server error:', error);\n      // Handle network errors\n      return null; // Return null to signify an error occurred\n  }\n};\n\n// Function to send a request to retrieve a certain tourist record by email\nconst fetchTouristByEmail = async (emailObject) => {\n  try {\n      const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(emailObject) // Send email object in request body\n      });\n\n      const data = await response.json();\n\n      // Handle the response\n      if (response.ok) {\n          console.log('Tourist data retrieved successfully:', data);\n          return data; // Return the retrieved data for further processing\n      } else {\n          console.error('Error:', data.message); // Log any error message returned from the server\n          return null; // Return null in case of error\n      }\n  } catch (error) {\n      console.error('Network error while fetching tourist:', error); // Handle network errors\n      return null; // Return null in case of a network error\n  }\n};\n// we want a function that sends a request for updating , we send the jason format with all the data and the email of the tourist \nasync function updateTouristByEmail(email, updatedData) {\n    const url = 'http://localhost:4000/api/tourists/updateByEmail'; // Backend endpoint\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST', // Specify the request method\n            headers: {\n                'Content-Type': 'application/json' // Set content type to JSON\n            },\n            body: JSON.stringify({ email, updatedData }) // Convert email and updated data to JSON\n        });\n\n        // Check if the response is ok (status in the range 200-299)\n        if (!response.ok) {\n            const errorResponse = await response.json(); // Get error response\n            throw new Error(errorResponse.message || 'Error updating tourist');\n        }\n\n        const result = await response.json(); // Parse the JSON response\n        console.log('Tourist updated successfully:', result); // Log the result\n        return result; // Return the result to caller\n\n    } catch (error) {\n        console.error('Error updating tourist:', error.message); // Log any errors\n        throw error; // Rethrow the error for further handling\n    }\n}\n\n//------------------------------------\n// tour guide request methods \n// a method that handles the registration of the tour guide\nconst createTourGuideRequest = async (tourGuideData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/tourGuides', { // Update the endpoint accordingly\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(tourGuideData),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to create tour guide: ' + response.statusText);\n        }\n\n        const data = await response.json();\n        console.log('registrationOK',data);\n        return data; // return the response data (success message and tour guide info)\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // propagate the error to be handled where this function is called\n    }\n};\n\n\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async (email) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email }), // Ensure you're sending the email correctly\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Error fetching Tour Guide');\n        }\n\n        const data = await response.json();\n        return data.tourGuide; // Assuming your backend returns a tourGuide object\n    } catch (error) {\n        console.error('Error fetching tour guide:', error.message);\n        throw error; // Propagate error for further handling\n    }\n};\n\n// Export the new method along with others\nexport { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}