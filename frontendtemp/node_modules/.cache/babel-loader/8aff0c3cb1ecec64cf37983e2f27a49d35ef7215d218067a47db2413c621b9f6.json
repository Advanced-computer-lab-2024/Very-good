{"ast":null,"code":"// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\nimport axios from \"axios\";\n\n// Function for the registration of a tourist\nconst registerTourist = async touristData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(touristData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tourist registered successfully:', data);\n      return data;\n    } else {\n      console.error('Error during registration:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    return null;\n  }\n};\n\n// Function to send a request to retrieve a certain tourist record by email\nconst fetchTouristByEmail = async emailObject => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(emailObject)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tourist data retrieved successfully:', data);\n      return data;\n    } else {\n      console.error('Error:', data.message);\n      return null;\n    }\n  } catch (error) {\n    console.error('Network error while fetching tourist:', error);\n    return null;\n  }\n};\n\n// Function to send a request for updating a tourist by email\nasync function updateTouristByEmail(email, updatedData) {\n  const url = 'http://localhost:4000/api/tourists/updateByEmail';\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        updatedData\n      })\n    });\n    if (!response.ok) {\n      const errorResponse = await response.json();\n      throw new Error(errorResponse.message || 'Error updating tourist');\n    }\n    const result = await response.json();\n    console.log('Tourist updated successfully:', result);\n    return result;\n  } catch (error) {\n    console.error('Error updating tourist:', error.message);\n    throw error;\n  }\n}\n\n// Tour guide request methods\n\n// Function for the registration of a tour guide\nconst createTourGuideRequest = async tourGuideData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tourGuideData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create tour guide: ' + response.statusText);\n    }\n    const data = await response.json();\n    console.log('registrationOK', data);\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // propagate the error to be handled where this function is called\n  }\n};\n\n//Admin regest\nconst registerAdmin = async adminData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/admins', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(adminData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Admin registered successfully:', data);\n      // Handle success here\n      return data; // You can return data for further processing if needed\n    } else {\n      console.error('Error during registration:', data);\n      // Handle error response here\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    // Handle network errors\n    return null; // Return null to signify an error occurred\n  }\n};\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async email => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error fetching Tour Guide');\n    }\n    const data = await response.json();\n    return data.tourGuide;\n  } catch (error) {\n    console.error('Error fetching tour guide:', error.message);\n    throw error; // Propagate error for further handling\n  }\n};\n//-------------------------\n// function to create an advertiser and place in database \nconst registerAdvertiser = async advertiserData => {\n  try {\n    const response = await fetch('http://localhost:4000/api/advertisers/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(advertiserData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Advertiser created successfully:', data);\n      return data; // Return the created advertiser data for further use\n    } else {\n      console.error('Error during advertiser creation:', data);\n      return null; // Return null in case of an error response\n    }\n  } catch (error) {\n    console.error('Network or server error:', error);\n    return null; // Return null if there was a network or server error\n  }\n};\nconst fetchAdvertiserByEmail = async data => {\n  try {\n    const response = await fetch('http://localhost:4000/api/advertisers/getAdvertiserByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.message || 'Error fetching advertiser');\n    }\n    return result;\n  } catch (error) {\n    console.error('Error fetching advertiser:', error);\n    throw error;\n  }\n};\n\n//----------------------------------------\n//seller functions \n//function to create a seller and place in the database \nconst registerSeller = async sellerData => {\n  try {\n    // Send the POST request to the backend\n    const response = await fetch('http://localhost:4000/api/sellers/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sellerData) // Send seller data as JSON\n    });\n\n    // Parse the JSON response\n    const data = await response.json();\n\n    // Check if the response is successful\n    if (response.ok) {\n      console.log('Seller registered successfully:', data);\n      // You can handle success logic here (e.g., navigate to another page, show success message)\n      return data;\n    } else {\n      // Handle error response from the server\n      console.error('Error during seller registration:', data);\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    // Handle network or server errors\n    console.error('Network or server error:', error);\n    return null; // Return null to signify an error occurred\n  }\n};\nconst fetchSellerByEmail = async email => {\n  try {\n    const response = await fetch('http://localhost:4000/api/sellers/getSellerByEmail', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      }) // Send email as an object\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching seller by email:', error);\n    throw error; // Re-throw the error for handling in the calling function\n  }\n};\nconst updateSellerByEmail = async (email, updatedData) => {\n  try {\n    const response = await fetch('http://localhost:4000/api/sellers/updateSeller', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        updatedData\n      }) // Send email and updated data\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data; // Handle success\n  } catch (error) {\n    console.error('Error updating seller:', error);\n    throw error; // Handle error\n  }\n};\n\n//-------------------------------------------------------------------------------------------\n// New function to get all tags\nconst fetchAllTags = async () => {\n  try {\n    const response = await fetch('http://localhost:4000/api/tags', {\n      method: 'GET',\n      // Use GET method to retrieve data\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Tags retrieved successfully:', data);\n      return data.data; // Assuming your backend returns an object with a 'data' property containing the tags\n    } else {\n      console.error('Error retrieving tags:', data.message);\n      return null; // Return null in case of error\n    }\n  } catch (error) {\n    console.error('Network error while fetching tags:', error);\n    return null; // Return null in case of a network error\n  }\n};\n\n/*\nconst updateTag = async (tagId, updatedData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/tags//update/${tagId}', {\n            method: 'PUT', // Use PUT for update\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedData), // Send updated data\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Error updating tag');\n        }\n\n        const result = await response.json(); // Get updated tag data\n        console.log('Tag updated successfully:', result);\n        return result; // Return updated tag data\n    } catch (error) {\n        console.error('Error updating tag:', error.message);\n        throw error; // Propagate error\n    }\n};\n*/\n\n// Function to delete a tag\n/*const deleteTag = async (tagId) => {\n    try {\n        const response = await fetch(`http://localhost:4000/api/tags/delete/${tagId}`, {\n            method: 'DELETE', // Use DELETE for removing a tag\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Error deleting tag');\n        }\n\n        console.log('Tag deleted successfully');\n        return true; // Return true on success\n    } catch (error) {\n        console.error('Error deleting tag:', error.message);\n        throw error; // Propagate error\n    }\n};*/\n\nconst deleteTag = async tagId => {\n  const url = `http://localhost:4000/api/tags/deletee/${tagId}`;\n  const response = await axios.delete(url);\n  return response.data;\n};\nconst updateTag = async (tagId, updatedData) => {\n  console.log(updatedData);\n  const url = `http://localhost:4000/api/tags/update/${tagId}`;\n  const response = await axios.patch(url, updatedData);\n  return response.data;\n};\n//----------------------------------------------------------------\n//Admin request sending methods \nconst BASE_URL = 'http://localhost:4000/api/admins/';\nconst addAdmin = async adminData => {\n  try {\n    const response = await axios.post(BASE_URL, adminData);\n    return response.data; // Return the response data from the server\n  } catch (error) {\n    console.error('Error creating admin:', error.response ? error.response.data : error.message);\n    throw error; // Propagate the error for handling in the component\n  }\n};\nconst BASE_URL2 = 'http://localhost:4000/api/tourismGoverners/';\nconst addTourismGoverner = async tourismGovernerData => {\n  try {\n    const response = await axios.post('http://localhost:4000/api/tourismGoverners/', tourismGovernerData);\n    console.log(response.data); // Handle the response data as needed\n    return response.data; // Return the response data for further use\n  } catch (error) {\n    console.error('Error adding Tourism Governer:', error.response ? error.response.data : error.message);\n    throw error; // Throw the error for further handling if necessary\n  }\n};\n//---------------------------\n// method that sends a request to get all tourist accounts \n\n// Export the new method along with others\nexport { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail, fetchAllTags, updateTag, deleteTag, addAdmin, addTourismGoverner, registerAdvertiser, registerSeller, fetchSellerByEmail, updateSellerByEmail, fetchAdvertiserByEmail };","map":{"version":3,"names":["axios","registerTourist","touristData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","log","error","fetchTouristByEmail","emailObject","message","updateTouristByEmail","email","updatedData","url","errorResponse","Error","result","createTourGuideRequest","tourGuideData","statusText","registerAdmin","adminData","fetchTourGuideByEmail","errorData","tourGuide","registerAdvertiser","advertiserData","fetchAdvertiserByEmail","registerSeller","sellerData","fetchSellerByEmail","updateSellerByEmail","fetchAllTags","deleteTag","tagId","delete","updateTag","patch","BASE_URL","addAdmin","post","BASE_URL2","addTourismGoverner","tourismGovernerData"],"sources":["/Users/maranmalak/MERNSTACK/Very-good/frontendtemp/src/RequestSendingMethods.js"],"sourcesContent":["// RequestSendingMethods.js - contains all the methods that send requests used in the action listeners\n\nimport axios from \"axios\";\n\n// Function for the registration of a tourist\nconst registerTourist = async (touristData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(touristData),\n      });\n  \n      const data = await response.json();\n      if (response.ok) {\n        console.log('Tourist registered successfully:', data);\n        return data;\n      } else {\n        console.error('Error during registration:', data);\n        return null;\n      }\n    } catch (error) {\n      console.error('Network or server error:', error);\n      return null;\n    }\n  };\n  \n  // Function to send a request to retrieve a certain tourist record by email\n  const fetchTouristByEmail = async (emailObject) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourists/getByEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(emailObject),\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok) {\n        console.log('Tourist data retrieved successfully:', data);\n        return data;\n      } else {\n        console.error('Error:', data.message);\n        return null;\n      }\n    } catch (error) {\n      console.error('Network error while fetching tourist:', error);\n      return null;\n    }\n  };\n  \n  // Function to send a request for updating a tourist by email\n  async function updateTouristByEmail(email, updatedData) {\n    const url = 'http://localhost:4000/api/tourists/updateByEmail';\n  \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, updatedData }),\n      });\n  \n      if (!response.ok) {\n        const errorResponse = await response.json();\n        throw new Error(errorResponse.message || 'Error updating tourist');\n      }\n  \n      const result = await response.json();\n      console.log('Tourist updated successfully:', result);\n      return result;\n    } catch (error) {\n      console.error('Error updating tourist:', error.message);\n      throw error;\n    }\n  }\n  \n  // Tour guide request methods\n  \n  // Function for the registration of a tour guide\n  const createTourGuideRequest = async (tourGuideData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourGuides', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(tourGuideData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to create tour guide: ' + response.statusText);\n      }\n  \n      const data = await response.json();\n      console.log('registrationOK', data);\n      return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // propagate the error to be handled where this function is called\n    }\n};\n\n//Admin regest\nconst registerAdmin = async (adminData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/admins', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(adminData),\n        });\n  \n        const data = await response.json();\n        if (response.ok) {\n            console.log('Admin registered successfully:', data);\n            // Handle success here\n            return data; // You can return data for further processing if needed\n        } else {\n            console.error('Error during registration:', data);\n            // Handle error response here\n            return null; // Return null in case of error\n        }\n    } catch (error) {\n        console.error('Network or server error:', error);\n        // Handle network errors\n        return null; // Return null to signify an error occurred\n    }\n  };\n\n\n// a method that handles reading the info of the tour guide by email \n\n// Function to send a request to retrieve a tour guide record by email\nconst fetchTourGuideByEmail = async (email) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/tourGuides/getByEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error fetching Tour Guide');\n      }\n  \n      const data = await response.json();\n      return data.tourGuide;\n    } catch (error) {\n        console.error('Error fetching tour guide:', error.message);\n        throw error; // Propagate error for further handling\n    }\n};\n//-------------------------\n// function to create an advertiser and place in database \nconst registerAdvertiser = async (advertiserData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/advertisers/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(advertiserData),\n        });\n  \n        const data = await response.json();\n        if (response.ok) {\n            console.log('Advertiser created successfully:', data);\n            return data; // Return the created advertiser data for further use\n        } else {\n            console.error('Error during advertiser creation:', data);\n            return null; // Return null in case of an error response\n        }\n    } catch (error) {\n        console.error('Network or server error:', error);\n        return null; // Return null if there was a network or server error\n    }\n  };\n  const fetchAdvertiserByEmail = async (data) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/advertisers/getAdvertiserByEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n  \n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.message || 'Error fetching advertiser');\n      }\n  \n      return result;\n    } catch (error) {\n      console.error('Error fetching advertiser:', error);\n      throw error;\n    }\n  };\n\n\n\n\n\n\n\n\n\n//----------------------------------------\n//seller functions \n//function to create a seller and place in the database \nconst registerSeller = async (sellerData) => {\n    try {\n      // Send the POST request to the backend\n      const response = await fetch('http://localhost:4000/api/sellers/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(sellerData), // Send seller data as JSON\n      });\n  \n      // Parse the JSON response\n      const data = await response.json();\n  \n      // Check if the response is successful\n      if (response.ok) {\n        console.log('Seller registered successfully:', data);\n        // You can handle success logic here (e.g., navigate to another page, show success message)\n        return data;\n      } else {\n        // Handle error response from the server\n        console.error('Error during seller registration:', data);\n        return null; // Return null in case of error\n      }\n    } catch (error) {\n      // Handle network or server errors\n      console.error('Network or server error:', error);\n      return null; // Return null to signify an error occurred\n    }\n  };\n  const fetchSellerByEmail = async (email) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/sellers/getSellerByEmail', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email }), // Send email as an object\n        });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching seller by email:', error);\n        throw error; // Re-throw the error for handling in the calling function\n    }\n};\nconst updateSellerByEmail = async (email, updatedData) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/sellers/updateSeller', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, updatedData }), // Send email and updated data\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      \n      const data = await response.json();\n      return data; // Handle success\n    } catch (error) {\n      console.error('Error updating seller:', error);\n      throw error; // Handle error\n    }\n  };\n\n\n\n//-------------------------------------------------------------------------------------------\n// New function to get all tags\nconst fetchAllTags = async () => {\n    try {\n        const response = await fetch('http://localhost:4000/api/tags', {\n            method: 'GET', // Use GET method to retrieve data\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n            console.log('Tags retrieved successfully:', data);\n            return data.data; // Assuming your backend returns an object with a 'data' property containing the tags\n        } else {\n            console.error('Error retrieving tags:', data.message);\n            return null; // Return null in case of error\n        }\n    } catch (error) {\n        console.error('Network error while fetching tags:', error);\n        return null; // Return null in case of a network error\n    }\n};\n\n/*\nconst updateTag = async (tagId, updatedData) => {\n    try {\n        const response = await fetch('http://localhost:4000/api/tags//update/${tagId}', {\n            method: 'PUT', // Use PUT for update\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedData), // Send updated data\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Error updating tag');\n        }\n\n        const result = await response.json(); // Get updated tag data\n        console.log('Tag updated successfully:', result);\n        return result; // Return updated tag data\n    } catch (error) {\n        console.error('Error updating tag:', error.message);\n        throw error; // Propagate error\n    }\n};\n*/\n\n// Function to delete a tag\n/*const deleteTag = async (tagId) => {\n    try {\n        const response = await fetch(`http://localhost:4000/api/tags/delete/${tagId}`, {\n            method: 'DELETE', // Use DELETE for removing a tag\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Error deleting tag');\n        }\n\n        console.log('Tag deleted successfully');\n        return true; // Return true on success\n    } catch (error) {\n        console.error('Error deleting tag:', error.message);\n        throw error; // Propagate error\n    }\n};*/\n\nconst deleteTag = async (tagId)=>{\n    const url = `http://localhost:4000/api/tags/deletee/${tagId}`;\n    const response = await axios.delete(url);\n    return response.data\n}\n\nconst updateTag = async (tagId ,updatedData) =>{\n    console.log(updatedData)\n    const url = `http://localhost:4000/api/tags/update/${tagId}`;\n    const response = await axios.patch(url, updatedData);\n    return response.data;\n}\n//----------------------------------------------------------------\n//Admin request sending methods \nconst BASE_URL = 'http://localhost:4000/api/admins/';\nconst addAdmin = async (adminData) => {\n    try {\n        const response = await axios.post(BASE_URL, adminData);\n        return response.data; // Return the response data from the server\n    } catch (error) {\n        console.error('Error creating admin:', error.response ? error.response.data : error.message);\n        throw error; // Propagate the error for handling in the component\n    }\n};\nconst BASE_URL2 = 'http://localhost:4000/api/tourismGoverners/';\n\nconst addTourismGoverner = async (tourismGovernerData) => {\n    try {\n        const response = await axios.post('http://localhost:4000/api/tourismGoverners/', tourismGovernerData);\n        console.log(response.data); // Handle the response data as needed\n        return response.data; // Return the response data for further use\n    } catch (error) {\n        console.error('Error adding Tourism Governer:', error.response ? error.response.data : error.message);\n        throw error; // Throw the error for further handling if necessary\n    }\n};\n//---------------------------\n// method that sends a request to get all tourist accounts \n\n\n\n// Export the new method along with others\nexport { registerTourist, fetchTouristByEmail, updateTouristByEmail, createTourGuideRequest, fetchTourGuideByEmail,fetchAllTags,updateTag,deleteTag,addAdmin,addTourismGoverner,\n    registerAdvertiser,registerSeller,fetchSellerByEmail,updateSellerByEmail,fetchAdvertiserByEmail};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}